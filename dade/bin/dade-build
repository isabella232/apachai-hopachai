#!/bin/bash
set -e
DADEROOT=`dirname "$0"`
DADEROOT=`cd "$DADEROOT/.."; pwd`
source "$DADEROOT/bashlib/library.sh"

function cleanup()
{
	local pids=`jobs -p`
	if [[ "$builddir" != "" ]]; then
		rm -rf "$builddir"
	fi
	if [[ "$pids" != "" ]]; then
		kill $pids
	fi
}

trap cleanup EXIT

dump=$("$DADEROOT/scripts/dump.rb" Dadefile)
eval "$dump"

# List all app files.
IFS=$'\n'
app_files=(`"$DADEROOT/scripts/list_files.rb" "$DADEFILE_APP_DIR_PATH"`)
if [[ "$DADEFILE_IMAGE_RESOURCES_DIR_PATH" != "" ]]; then
	image_resources_files=(`"$DADEROOT/scripts/list_files" "$DADEFILE_IMAGE_RESOURCES_DIR_PATH"`)
fi
unset IFS

# Create temporary build directory for 'docker build'.
builddir=`mktemp -d /tmp/dade.XXXXXXX`
"$DADEROOT/scripts/copy_files.rb" "app files" \
	"$DADEFILE_APP_DIR_PATH" \
	"$builddir/$DADEFILE_APP_DIR_BUILD_PATH" \
	"${app_files[@]}"
if [[ "$DADEFILE_IMAGE_RESOURCES_DIR_PATH" != "" ]]; then
	"$DADEROOT/scripts/copy_files.rb" "image resource files" \
		"$DADEFILE_IMAGE_RESOURCES_DIR_PATH" \
		"$builddir/$DADEFILE_IMAGE_RESOURCES_DIR_BUILD_PATH" \
		"${image_resources_files[@]}"
fi
if [[ -e "$DADEROOT/integrations/$DADEFILE_TYPE" ]]; then
	mkdir "$builddir/_dade_integration"
	cp -R "$DADEROOT/integrations/$DADEFILE_TYPE" "$builddir/_dade_integration/"
fi

# Preprocess Dockerfile and put it in the build directory.
"$DADEROOT/scripts/process_dockerfile_dade.rb" \
	"$DADEFILE_DOCKERFILE_DADE" \
	"$DADEFILE_APP_DIR_BUILD_PATH" > \
	"$builddir/Dockerfile"

# Run 'docker build'.
pushd "$builddir"
docker build -t "$DADEFILE_NAME:$DADEFILE_VERSION.dev" .
