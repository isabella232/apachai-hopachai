#!/bin/bash
set -e

# Set environment variables for subsequent processes.
export DADE_ENV=${DADE_ENV:-${RAILS_ENV:-${RACK_ENV:-production}}}
export RAILS_ENV=$DADE_ENV
export RACK_ENV=$DADE_ENV
echo -n $DADE_ENV > /etc/container_environment/DADE_ENV
echo -n $RAILS_ENV > /etc/container_environment/RAILS_ENV
echo -n $RACK_ENV > /etc/container_environment/RACK_ENV

echo " --> Initializing gem bundle"
rm -rf /app/.bundle
cp -R /var/lib/dade_gem_bundle_config /app/.bundle
chown -R app: /app/.bundle

if [[ "$DADE_ENV" == production ]]; then
	echo " --> Initializing precompiled assets"
	pushd /app/public >/dev/null
	if [[ -h assets ]]; then
		rm -f assets
	elif [[ -e assets ]]; then
		i=0
		while [[ -e assets.dade-backup$i ]]; do
			(( i++ ))
		done
		mv assets assets.dade-backup$i
	fi
	ln -s ../_dade_rails_assets assets
	popd 2>/dev/null
fi

if [[ "$RAILS_DB_MIGRATE" = 0 ]]; then
	echo " --> RAILS_DB_MIGRATE=0 set, skipping database migrations"
else
	echo " --> Inspecting database state"
	pushd /app >/dev/null
	if setuser app bundle exec rake db:version >/tmp/db_version 2>/dev/null; then
		db_version=`cat /tmp/db_version | sed 's/.*: //'`
		rm /tmp/db_version
	else
		db_version=0
	fi
	if [[ "$db_version" = 0 ]]; then
		echo "     Database is empty"
		echo " --> Setting up new database"
		setuser app bundle exec rake db:create db:setup
	else
		echo "     Existing database found"
		echo " --> Running database migrations"
		setuser app bundle exec rake db:migrate
	fi
	popd 2>/dev/null
fi
