#!/bin/bash
set -e

TARGET_USER="$1"

if [[ "$TARGET_USER" = "" ]]; then
	echo "Usage: ./setup <TARGET USER>"
	exit 1
fi

if [[ "`id -u`" != 0 ]]; then
	echo "This script must be run as root."
	exit 1
fi

function apt_get_install()
{
	apt-get install -q -y --force-yes --no-install-recommends "$@"
}

function start_runit_service()
{
	if [[ $TARGET_USER != vagrant ]]; then
		(cd /etc/service && exec runsv $1) &
	fi
	while ! [[ -e /etc/service/$1/supervise/ok ]]; do
		sleep 1
	done
	sv start /etc/service/$1 || {
		cat webui/log/*.log
		exit 1
	}
	sleep 1
}

export DEBIAN_FRONTEND=noninteractive
SELFDIR=`dirname "$0"`
set -x
cd "$SELFDIR"

# Fix up permissions and directories.
if [[ $TARGET_USER != vagrant ]]; then
	mkdir -p webui/log
	chown -R "$TARGET_USER:" .
fi

# Add APT sources.
if ! [[ -e /etc/apt/sources.list.d/docker.list ]]; then
	if ! [[ -e /usr/bin/wget ]]; then
		apt-get update
		apt_get_install wget
	fi
	wget -q -O - https://get.docker.io/gpg | apt-key add -
	echo deb http://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list
	apt-get update
fi

# Install software.
apt_get_install lxc-docker cgroup-lite git postfix inotify-tools libpq-dev postgresql

# Setup Docker.
usermod -a -G docker $TARGET_USER

# Setup environment.
if [[ $TARGET_USER != vagrant ]]; then
	if ! grep -q RAILS_ENV /etc/environment; then
		echo RAILS_ENV=production >> /etc/environment
	fi
fi

# Setup PostgreSQL service.
update-rc.d -f postgresql remove
if ! [[ -e /etc/service/postgresql/run ]]; then
	service postgresql stop
fi
mkdir -p /etc/service/postgresql
cp resources/run_postgresql /etc/service/postgresql/run
start_runit_service postgresql

# Setup PostgreSQL authentication.
if ! grep -q $TARGET_USER /etc/postgresql/9.1/main/pg_ident.conf; then
	echo "appa $TARGET_USER $TARGET_USER" >> /etc/postgresql/9.1/main/pg_ident.conf
fi
if ! grep -q $TARGET_USER /etc/postgresql/9.1/main/pg_hba.conf; then
	echo "local all $TARGET_USER peer map=appa" >> /etc/postgresql/9.1/main/pg_hba.conf
fi
if ! (sudo -u postgres psql <<<"select rolname from pg_roles" | grep -q $TARGET_USER); then
	sudo -u postgres -H createuser -s -r $TARGET_USER
fi

# Setup PostgreSQL databases.
databases=`sudo -u postgres -H psql <<<"select datname from pg_database where datistemplate = false"`
if [[ $TARGET_USER = vagrant ]]; then
	if ! [[ "$databases" =~ appa_dev ]]; then
		sudo -u postgres -H createdb appa_dev
	fi
	if ! [[ "$databases" =~ appa_test ]]; then
		sudo -u postgres -H createdb appa_test
	fi
fi
if ! [[ "$databases" =~ appa_prod ]]; then
	sudo -u postgres -H createdb appa_prod
fi

# Setup Redis.
apt-get install -y redis-server libhiredis-dev
update-rc.d -f postgresql remove
if ! [[ -e /etc/service/redis/run ]]; then
	status=`service redis-server status`
	if [[ "$status" =~ start ]]; then
		service redis-server stop
	fi
fi
mkdir -p /etc/service/redis
cp resources/redis.conf /etc/redis/redis.conf
cp resources/run_redis /etc/service/redis/run
start_runit_service redis

# Install gem bundle.
mkdir -p /appa_bundle
chown $TARGET_USER: /appa_bundle
sudo -u $TARGET_USER -H bundle install --path /appa_bundle
cd webui
sudo -u $TARGET_USER -H bundle install --path /appa_bundle
cd ..

# Setup Sidekiq.
mkdir -p /etc/service/sidekiq
cp resources/run_sidekiq /etc/service/sidekiq/run
start_runit_service sidekiq

# Setup app server.
mkdir -p /etc/service/webui
cp resources/run_webui /etc/service/webui/run
start_runit_service webui

# Shut down all daemons before exiting 'docker build'.
if [[ $TARGET_USER != vagrant ]]; then
	for service in /etc/service/*; do
		if [[ -e $service/supervise/ok ]]; then
			sv stop $service
		fi
	done
fi
