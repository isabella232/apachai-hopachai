#!/bin/bash
set -e

function apt_get_install()
{
	apt-get install -q -y --force-yes --no-install-recommends "$@"
}

export DEBIAN_FRONTEND=noninteractive
SELFDIR=`dirname "$0"`
set -x
cd "$SELFDIR"


#####################################################


apt-get update

# Set locale so that PostgreSQL creates template databases in UTF-8 encoding.
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Fix up permissions and directories.
mkdir -p webui/log
chown -R app: .

# Setup PostgreSQL service.
mkdir -p /etc/service/postgresql
cp resources/run_postgresql /etc/service/postgresql/run

# Setup Redis.
apt-get install -y redis-server libhiredis-dev
mkdir -p /etc/service/redis
cp resources/redis.conf /etc/redis/redis.conf
cp resources/run_redis /etc/service/redis/run

# Setup Sidekiq.
mkdir -p /etc/service/sidekiq
cp resources/run_sidekiq /etc/service/sidekiq/run

# Setup app server.
rm -f /etc/service/nginx/down
cp resources/webui.conf /etc/nginx/sites-enabled/
rm /etc/nginx/sites-enabled/default
sed -i 's|daemon off;|daemon off;\ninclude /etc/nginx/main.conf;|' /etc/nginx/nginx.conf
cp resources/nginx_main.conf /etc/nginx/main.conf

pushd webui

# Install gem bundle.
# When running 'dade run', the mounted app has no .bundle directory
# or may have a wrong .bundle directory. We store the .bundle directory
# here and restore it during 'dade run'.
bundle install --path /var/lib/dade_gem_bundle
cp -dpR .bundle /var/lib/dade_gem_bundle_config

# Precompiled assets should not be used when the app is running in
# development mode, so we move the assets elsewhere and decide during
# 'dade run' whether to move them back.
if [[ -h public/assets ]]; then
	rm public/assets
fi
bundle exec rake assets:precompile
if [[ -e _dade_rails_assets ]]; then
	rm -rf _dade_rails_assets
fi
mv public/assets _dade_rails_assets

popd

# Install init scripts.
cat <<EOF >> /etc/my_init.d/10_init_webui
#!/bin/sh
exec /app/init
EOF
chmod +x /etc/my_init.d/10_init_webui
