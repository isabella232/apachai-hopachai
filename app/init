#!/bin/bash
set -e

# Set environment variables for subsequent processes.
export DADE_ENV=${DADE_ENV:-${RAILS_ENV:-${RACK_ENV:-production}}}
export RAILS_ENV=$DADE_ENV
export RACK_ENV=$DADE_ENV
export DOCKER_HOST=unix:///docker.sock
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
echo -n $DADE_ENV > /etc/container_environment/DADE_ENV
echo -n $RAILS_ENV > /etc/container_environment/RAILS_ENV
echo -n $RACK_ENV > /etc/container_environment/RACK_ENV
echo -n $DOCKER_HOST > /etc/container_environment/DOCKER_HOST

function start_postgresql()
{
	echo " --> Starting database server"
	rm -rf /etc/service/postgresql/supervise
	(cd /etc/service && exec runsv postgresql) &
	while ! [[ -e /etc/service/postgresql/supervise/ok ]]; do
		sleep 0.1
	done
	sv start /etc/service/postgresql
	while ! [[ -e /var/run/postgresql/.s.PGSQL.5432 ]]; do
		sleep 0.1
	done
	sleep 2
}

function stop_postgresql()
{
	echo " --> Stopping database server"
	sv stop /etc/service/postgresql
	pid=`ps -A -opid,command | grep ' runsv postgresql' | grep -v grep | awk '{ print $1 }'`
	kill $pid
	sleep 1
}

if ! [[ -e /var/lib/postgresql/9.1 ]]; then
	echo " --> Initializing PostgreSQL"
	chown -R postgres:postgres /var/lib/postgresql
	pg_dropcluster 9.1 main || true
	pg_createcluster 9.1 main
	start_postgresql
	setuser postgres createuser -s -r app
	stop_postgresql
fi

sed -i "s/server {/server {\nrails_env $DADE_ENV;\n/" /etc/nginx/sites-enabled/webui.conf

echo " --> Pulling sandbox image"
docker pull phusion/apachai-hopachai-sandbox

echo " --> Initializing gem bundle"
rm -rf /app/.bundle /app/webui/.bundle
cp -R /var/lib/dade_gem_bundle_config /app/.bundle
cp -R /var/lib/dade_gem_bundle_config /app/webui/.bundle
chown -R app: /app/.bundle /app/webui/.bundle

if [[ "$DADE_ENV" == production ]]; then
	echo " --> Initializing precompiled assets"
	pushd /app/webui/public >/dev/null
	if [[ -h assets ]]; then
		rm -f assets
	elif [[ -e assets ]]; then
		i=0
		while [[ -e assets.dade-backup$i ]]; do
			(( i++ ))
		done
		mv assets assets.dade-backup$i
	fi
	ln -s ../_dade_rails_assets assets
	popd >/dev/null
fi

if [[ "$RAILS_DB_MIGRATE" == "0" ]]; then
	echo " --> RAILS_DB_MIGRATE=0 set, skipping database migrations"
else
	start_postgresql

	echo " --> Inspecting database state"
	pushd /app/webui >/dev/null
	if setuser app ./bin/rake db:version >/tmp/db_version 2>/dev/null; then
		db_version=`cat /tmp/db_version | sed 's/.*: //'`
		rm /tmp/db_version
	else
		db_version=0
	fi
	if [[ "$db_version" = 0 ]]; then
		echo "     Database is empty"
		echo " --> Setting up new database"
		setuser app ./bin/rake db:create db:setup db:seed
	else
		echo "     Existing database found"
		echo " --> Running database migrations"
		setuser app ./bin/rake db:migrate db:seed
	fi
	popd

	stop_postgresql
fi
